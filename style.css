/* --- Reset Básico e Configurações Globais --- */
* { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', sans-serif; }

/* --- Variáveis de Tema --- */
:root[data-theme="light"] {
    --bg-color: #E0E5EC; --text-color: #555; --primary-color: #007AFF;
    --component-bg: #E0E5EC; --shadow-light: #ffffff; --shadow-dark: #a3b1c6;
    --icon-color: #888; --gray-color: #B0B0B0;
    --soft-shadow-sharp: -2px -2px 5px var(--shadow-light), 2px 2px 5px var(--shadow-dark);
    --soft-shadow-inset-sharp: inset 2px 2px 5px var(--shadow-dark), inset -3px -3px 5px var(--shadow-light);
}
:root[data-theme="dark"] {
    --bg-color: #191919; --text-color: #EAEAEA; --primary-color: #EAEAEA;
    --component-bg: #2F2F2F; --shadow-light: #3a3a3a; --shadow-dark: #1F1F1F;
    --icon-color: #868e96; --gray-color: #6c757d;
    --soft-shadow-sharp: -2px -2px 5px var(--shadow-dark), 2px 2px 5px var(--shadow-light);
    --soft-shadow-inset-sharp: inset 2px 2px 4px var(--shadow-dark), inset -2px -2px 4px var(--shadow-light);
}

body { background-color: var(--bg-color); color: var(--text-color); display: flex; flex-direction: column; height: 100vh; }
.content { flex-grow: 1; padding: 2rem; overflow-y: auto; padding-bottom: 100px; }
.page { display: none; }
.page.active { display: block; }
.page h1 { font-weight: 600; margin-bottom: 1.5rem; }

/* --- Componentes Genéricos --- */
.soft-button { background-color: var(--component-bg); border: none; padding: 10px 20px; border-radius: 12px; color: var(--text-color); font-weight: 500; cursor: pointer; box-shadow: var(--soft-shadow-sharp); transition: all 0.2s ease-in-out; display: flex; align-items: center; justify-content: center; gap: 8px; }
.soft-button:active { box-shadow: var(--soft-shadow-inset-sharp); transform: scale(0.98); }
.soft-input, .soft-textarea { width: 100%; border: none; padding: 1rem; border-radius: 12px; background-color: var(--bg-color); color: var(--text-color); font-size: 1rem; box-shadow: var(--soft-shadow-inset-sharp); }
.soft-input:focus, .soft-textarea:focus { outline: none; }

/* --- Menu de Navegação --- */
.bottom-nav { position: fixed; bottom: 0; left: 0; width: 100%; background-color: var(--component-bg); padding: 10px 0; box-shadow: 0 -5px 10px rgba(0, 0, 0, 0.2); z-index: 10; }
.bottom-nav nav { display: flex; justify-content: space-around; align-items: center; }
.nav-button { background: none; border: none; color: var(--icon-color); display: flex; flex-direction: column; align-items: center; cursor: pointer; transition: all 0.3s ease; }
.nav-button i { font-size: 24px; margin-bottom: 4px; }
.nav-button span { font-size: 12px; }
.nav-button.active { color: var(--primary-color); transform: translateY(-5px); }

/* --- Página de Ajustes --- */
.setting-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem; background-color: var(--component-bg); border-radius: 12px; box-shadow: var(--soft-shadow-sharp); }
.toggle-button { width: 60px; height: 30px; background-color: var(--bg-color); border: none; border-radius: 15px; cursor: pointer; position: relative; box-shadow: var(--soft-shadow-inset-sharp); }
.toggle-circle { width: 24px; height: 24px; background-color: var(--icon-color); border-radius: 50%; position: absolute; top: 3px; left: 4px; transition: transform 0.3s ease; }
:root[data-theme="dark"] .toggle-circle { transform: translateX(29px); background-color: var(--primary-color); }

/* --- Aba Foco: Pomodoro --- */
.pomodoro-timer { margin-bottom: 2.5rem; display: flex; flex-direction: column; align-items: center; gap: 1rem; }
.timer-display-container { width: 200px; height: 200px; border-radius: 50%; background-color: var(--component-bg); display: flex; align-items: center; justify-content: center; box-shadow: var(--soft-shadow-sharp); }
#timer-display { font-size: 2.8rem; font-weight: 700; color: var(--text-color); }
#timer-status { font-weight: 500; }
:root[data-theme="light"] #timer-status { color: var(--primary-color); }
:root[data-theme="dark"] #timer-status { color: var(--text-color); opacity: 0.8; }
.pomodoro-controls { display: flex; gap: 1.5rem; margin-top: 1rem; }
.pomodoro-btn { width: 60px; height: 60px; border-radius: 50%; font-size: 28px; padding: 0; }

/* --- Aba Foco: To-Do List & Prioridades --- */
.todo-app { margin-bottom: 2.5rem; }
.todo-header { display: flex; gap: 10px; margin-bottom: 1.5rem; align-items: center; }
#task-input { flex-grow: 1; }
#add-task-btn { width: 50px; height: 50px; border-radius: 12px; font-size: 24px; padding: 0; flex-shrink: 0; }
:root[data-theme="light"] #add-task-btn { background-color: var(--primary-color); color: white; }
:root[data-theme="dark"] #add-task-btn { background-color: var(--component-bg); color: var(--primary-color); }
.priority-selector-wrapper { position: relative; }
.priority-btn { width: 50px; height: 50px; padding: 0; font-size: 20px; }
.priority-indicator-btn { font-size: 16px; color: transparent; background-clip: text; -webkit-background-clip: text; }
.priority-picker { position: absolute; bottom: 120%; left: 50%; transform: translateX(-50%); width: 150px; background-color: var(--component-bg); border-radius: 12px; box-shadow: var(--soft-shadow-sharp); padding: 0.5rem; z-index: 20; display: flex; flex-direction: column; gap: 0.5rem; }
.priority-picker.hidden { display: none; }
.priority-option { background: none; border: none; color: var(--text-color); padding: 0.75rem; border-radius: 8px; cursor: pointer; text-align: left; display: flex; align-items: center; gap: 10px; width: 100%; }
.priority-option:hover { background-color: var(--bg-color); }
#task-list { list-style: none; display: flex; flex-direction: column; gap: 1rem; }
.task-item { display: flex; align-items: center; justify-content: space-between; padding: 1rem; background-color: var(--component-bg); border-radius: 12px; box-shadow: var(--soft-shadow-sharp); }
.task-item-content { display: flex; align-items: center; gap: 12px; overflow: hidden; }
.task-item-content span:last-child { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.priority-tag { font-size: 0.75rem; font-weight: 600; padding: 4px 10px; border-radius: 8px; color: white; flex-shrink: 0; }
.task-item.completed span { text-decoration: line-through; opacity: 0.6; }
.task-item-buttons { display: flex; align-items: center; }
.task-item-buttons button { background: none; border: none; font-size: 22px; cursor: pointer; margin-left: 10px; color: var(--icon-color); }

/* Cores de Prioridade */
.priority-1, .priority-tag-1 { background-color: #dc3545; }
.priority-2, .priority-tag-2 { background-color: #ffc107; }
.priority-3, .priority-tag-3 { background-color: #0d6efd; }
.priority-4, .priority-tag-4 { background-color: #6c757d; }
.priority-dot { width: 12px; height: 12px; border-radius: 50%; }

/* --- Módulo de Metas --- */
.goals-app { margin-top: 2.5rem; }
.goals-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
.goals-header h2 { font-weight: 600; }
#goals-list { list-style: none; display: flex; flex-direction: column; gap: 1.5rem; }
.goal-item { background-color: var(--component-bg); border-radius: 16px; box-shadow: var(--soft-shadow-sharp); padding: 1rem; transition: all 0.3s ease; }
.goal-header { display: flex; justify-content: space-between; align-items: center; cursor: pointer; }
.goal-title { font-weight: 600; }
.goal-actions button { background: none; border: none; color: var(--icon-color); font-size: 20px; cursor: pointer; }
.goal-progress { margin-top: 1rem; cursor: pointer; }
.progress-bar-container { width: 100%; height: 8px; background-color: var(--bg-color); border-radius: 4px; box-shadow: var(--soft-shadow-inset-sharp); overflow: hidden; }
.progress-bar { height: 100%; width: 0%; background-color: #4caf50; border-radius: 4px; transition: width 0.5s ease; }
.goal-details { max-height: 0; overflow: hidden; transition: max-height 0.5s ease-in-out; }
.goal-item.expanded .goal-details { max-height: 600px; }
.goal-details-content { padding-top: 1rem; border-top: 1px solid var(--shadow-dark); margin-top: 1rem; }
.goal-categories { display: flex; gap: 8px; flex-wrap: wrap; margin-bottom: 1rem; }
.goal-category { font-size: 0.75rem; font-weight: 600; padding: 4px 8px; border-radius: 8px; color: white; }
.add-subtask-form { display: flex; gap: 10px; margin-top: 1rem; align-items: center; }
.add-subtask-form input { flex-grow: 1; }
.add-subtask-form button { padding: 0; width: 45px; height: 45px; font-size: 20px; flex-shrink: 0; }
.subtask-list { list-style: none; display: flex; flex-direction: column; gap: 1rem; margin-top: 1rem; }
.subtask-item { display: flex; align-items: center; justify-content: space-between; } /* CORREÇÃO DE LAYOUT */
.subtask-item-label { display: flex; align-items: center; cursor: pointer; }
.subtask-item-label .subtask-text { transition: all 0.2s ease; }
.subtask-item-label.completed .subtask-text { text-decoration: line-through; opacity: 0.6; }
.subtask-item input[type="checkbox"] { display: none; }
.custom-checkbox { width: 20px; height: 20px; background-color: var(--bg-color); border-radius: 6px; box-shadow: var(--soft-shadow-inset-sharp); margin-right: 12px; display: flex; align-items: center; justify-content: center; transition: all 0.2s ease; flex-shrink: 0; }
.custom-checkbox::after { content: '\ea4c'; font-family: 'boxicons'; font-size: 20px; color: var(--text-color); opacity: 0; transform: scale(0.5); transition: all 0.2s ease; }
.subtask-item input[type="checkbox"]:checked + .subtask-item-label .custom-checkbox { box-shadow: var(--soft-shadow-sharp); }
.subtask-item input[type="checkbox"]:checked + .subtask-item-label .custom-checkbox::after { opacity: 1; transform: scale(1); } /* CORREÇÃO CHECKBOX */
.subtask-actions { display: flex; align-items: center; gap: 8px; }
.subtask-actions button { background: none; border: none; color: var(--icon-color); font-size: 20px; cursor: pointer; }
.subtask-actions button i { font-size: inherit; }

/* Modal Styles */
.modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.6); display: flex; justify-content: center; align-items: center; z-index: 1000; opacity: 1; transition: opacity 0.3s ease; }
.modal-backdrop.hidden { opacity: 0; pointer-events: none; }
.modal-content { background-color: var(--component-bg); padding: 2rem; border-radius: 16px; width: 90%; max-width: 500px; box-shadow: var(--soft-shadow-sharp); }
#goal-form { display: flex; flex-direction: column; gap: 1rem; }
.category-container { display: flex; flex-wrap: wrap; gap: 10px; }
.category-btn { background-color: var(--bg-color); color: var(--text-color); padding: 8px 12px; border-radius: 10px; border: none; cursor: pointer; box-shadow: var(--soft-shadow-sharp); transition: all 0.2s ease; font-size: 0.9rem; }
.category-btn.active { box-shadow: var(--soft-shadow-inset-sharp); }
.modal-actions { display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1.5rem; }```

#### 📁 script.js (Completo e Corrigido)
```javascript
document.addEventListener('DOMContentLoaded', () => {

    // --- ELEMENTOS GERAIS E ESTADO DO APP ---
    const htmlElement = document.documentElement;
    const pages = document.querySelectorAll('.page');
    const navButtons = document.querySelectorAll('.nav-button');
    const saveToLocalStorage = (key, value) => localStorage.setItem(key, JSON.stringify(value));
    const loadFromLocalStorage = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue;

    // --- NAVEGAÇÃO E TEMA ---
    const applyTheme = (theme) => htmlElement.setAttribute('data-theme', theme);
    const switchTab = (targetId) => {
        const targetPage = document.getElementById(targetId);
        if (!targetPage) return;
        pages.forEach(p => p.classList.remove('active'));
        navButtons.forEach(b => b.classList.remove('active'));
        targetPage.classList.add('active');
        document.querySelector(`.nav-button[data-target="${targetId}"]`)?.classList.add('active');
    };
    navButtons.forEach(button => button.addEventListener('click', () => {
        const targetId = button.dataset.target;
        switchTab(targetId);
        saveToLocalStorage('activeTab', targetId);
    }));
    document.getElementById('theme-toggle').addEventListener('click', () => {
        const newTheme = htmlElement.getAttribute('data-theme') === 'light' ? 'dark' : 'light';
        applyTheme(newTheme);
        saveToLocalStorage('theme', newTheme);
    });

    // --- MÓDULO DE TAREFAS RÁPIDAS ---
    const taskInput = document.getElementById('task-input');
    const taskPriorityBtn = document.getElementById('task-priority-btn');
    const priorityPicker = document.getElementById('priority-picker');
    const addTaskBtn = document.getElementById('add-task-btn');
    const taskList = document.getElementById('task-list');
    
    const PRIORITIES = { 1: { name: 'Urgente', colorClass: 'priority-1' }, 2: { name: 'Alta', colorClass: 'priority-2' }, 3: { name: 'Média', colorClass: 'priority-3' }, 4: { name: 'Baixa', colorClass: 'priority-4' } };
    let tasks = loadFromLocalStorage('tasks', []);
    let currentTaskPriority = 3;

    const saveTasks = () => saveToLocalStorage('tasks', tasks);
    
    const renderTasks = () => {
        tasks.sort((a, b) => a.priority - b.priority);
        taskList.innerHTML = "";
        tasks.forEach(task => {
            const li = document.createElement('li');
            li.className = `task-item ${task.completed ? 'completed' : ''}`;
            const priorityInfo = PRIORITIES[task.priority];
            li.innerHTML = `<div class="task-item-content"><span class="priority-tag ${priorityInfo.colorClass}">${priorityInfo.name}</span><span>${task.text}</span></div><div class="task-item-buttons"><button class="complete-btn"><i class='bx bx-check-circle'></i></button><button class="delete-btn"><i class='bx bxs-trash'></i></button></div>`;
            li.dataset.taskText = task.text;
            li.dataset.taskPriority = task.priority;
            taskList.appendChild(li);
        });
    };

    const addTask = (taskText, priority) => { if (taskText?.trim()) { tasks.push({ text: taskText.trim(), completed: false, priority: parseInt(priority) }); saveTasks(); renderTasks(); } };
    const updatePriorityBtn = () => { const indicator = taskPriorityBtn.querySelector('.priority-indicator-btn'); indicator.className = `bx bxs-circle priority-indicator-btn ${PRIORITIES[currentTaskPriority].colorClass}`; };

    priorityPicker.innerHTML = Object.keys(PRIORITIES).map(key => `<button class="priority-option" data-priority="${key}"><span class="priority-dot ${PRIORITIES[key].colorClass}"></span>${PRIORITIES[key].name}</button>`).join('');
    taskPriorityBtn.addEventListener('click', (e) => { e.stopPropagation(); priorityPicker.classList.toggle('hidden'); });
    priorityPicker.addEventListener('click', (e) => { const option = e.target.closest('.priority-option'); if (option) { currentTaskPriority = parseInt(option.dataset.priority); updatePriorityBtn(); priorityPicker.classList.add('hidden'); } });
    document.addEventListener('click', () => priorityPicker.classList.add('hidden'));
    addTaskBtn.addEventListener('click', () => { addTask(taskInput.value, currentTaskPriority); taskInput.value = ""; });
    taskInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { addTask(taskInput.value, currentTaskPriority); taskInput.value = ""; } });
    taskList.addEventListener('click', (e) => { const item = e.target.closest('.task-item'); if (!item) return; const originalIndex = tasks.findIndex(task => task.text === item.dataset.taskText && task.priority == item.dataset.taskPriority); if (originalIndex === -1) return; if (e.target.closest('.complete-btn')) tasks[originalIndex].completed = !tasks[originalIndex].completed; if (e.target.closest('.delete-btn')) tasks.splice(originalIndex, 1); saveTasks(); renderTasks(); });
    
    // --- MÓDULO POMODORO ---
    const timerDisplay = document.getElementById('timer-display');
    const timerStatus = document.getElementById('timer-status');
    const startBtn = document.getElementById('start-btn');
    const pauseBtn = document.getElementById('pause-btn');
    const resetBtn = document.getElementById('reset-btn');
    let timer, totalSeconds, isPaused = true;
    let currentCycle = loadFromLocalStorage('pomodoro_currentCycle', 'focus');
    let pomodoroCount = loadFromLocalStorage('pomodoro_pomodoroCount', 0);
    const FOCUS_TIME = 25 * 60, SHORT_BREAK_TIME = 5 * 60, LONG_BREAK_TIME = 15 * 60;
    
    const updateDisplay = () => { if (!timerDisplay) return; const minutes = Math.floor(totalSeconds / 60); const seconds = totalSeconds % 60; timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`; document.title = `${timerDisplay.textContent} - Life OS`; };
    const switchCycle = () => { currentCycle = (currentCycle === 'focus') ? ((++pomodoroCount % 4 === 0) ? 'longBreak' : 'shortBreak') : 'focus'; saveToLocalStorage('pomodoro_pomodoroCount', pomodoroCount); saveToLocalStorage('pomodoro_currentCycle', currentCycle); setTimerForCurrentCycle(); };
    const setTimerForCurrentCycle = () => { isPaused = true; clearInterval(timer); switch (currentCycle) { case 'focus': totalSeconds = FOCUS_TIME; timerStatus.textContent = "Hora de Focar!"; break; case 'shortBreak': totalSeconds = SHORT_BREAK_TIME; timerStatus.textContent = "Pausa Curta"; break; case 'longBreak': totalSeconds = LONG_BREAK_TIME; timerStatus.textContent = "Pausa Longa"; break; } updateDisplay(); };
    startBtn.addEventListener('click', () => { if (isPaused) { isPaused = false; timer = setInterval(() => { if (--totalSeconds >= 0) updateDisplay(); else switchCycle(); }, 1000); } });
    pauseBtn.addEventListener('click', () => { isPaused = true; clearInterval(timer); });
    resetBtn.addEventListener('click', setTimerForCurrentCycle);

    // --- MÓDULO DE METAS ---
    const goalModal = document.getElementById('goal-modal');
    const goalForm = document.getElementById('goal-form');
    const goalsList = document.getElementById('goals-list');
    const modalTitle = document.getElementById('modal-title');
    const addGoalModalBtn = document.getElementById('add-goal-modal-btn');
    const categoryContainer = document.getElementById('goal-category-container');
    let goals = loadFromLocalStorage('goals', []);
    const ALL_CATEGORIES = { 'Pessoal': '#007BFF', 'Profissional': '#6F42C1', 'Acadêmica': '#28A745', 'Saúde': '#FD7E14', 'Finanças': '#FFC107' };
    const saveGoals = () => saveToLocalStorage('goals', goals);
    const renderGoals = () => {
        goalsList.innerHTML = "";
        goals.forEach((goal, index) => {
            const progress = goal.subtasks.length > 0 ? (goal.subtasks.filter(st => st.completed).length / goal.subtasks.length) * 100 : 0;
            const li = document.createElement('li');
            li.className = 'goal-item'; li.dataset.index = index;
            li.innerHTML = `<div class="goal-header"><span class="goal-title">${goal.title}</span><div class="goal-actions"><button class="edit-goal-btn" title="Editar Meta"><i class='bx bxs-pencil'></i></button><button class="delete-goal-btn" title="Excluir Meta"><i class='bx bxs-trash'></i></button></div></div><div class="goal-progress"><div class="progress-bar-container"><div class="progress-bar" style="width: ${progress.toFixed(0)}%"></div></div></div><div class="goal-details"><div class="goal-details-content"><div class="goal-categories">${goal.categories.map(cat => `<span class="goal-category" style="background-color:${ALL_CATEGORIES[cat] || '#6c757d'}">${cat}</span>`).join('')}</div><p><strong>Motivação:</strong> ${goal.motivation || 'N/A'}</p><p><strong>Data Alvo:</strong> ${goal.targetDate || 'N/A'}</p><ul class="subtask-list">${goal.subtasks.map((st, stIndex) => `<li class="subtask-item"><label for="st-${index}-${stIndex}" class="subtask-item-label ${st.completed ? 'completed' : ''}"><input type="checkbox" id="st-${index}-${stIndex}" data-subtask-index="${stIndex}" ${st.completed ? 'checked' : ''}><span class="custom-checkbox"></span><span class="subtask-text">${st.text}</span></label><div class="subtask-actions"><button class="add-to-focus-btn" data-subtask-index="${stIndex}" title="Adicionar ao Foco do Dia"><i class='bx bx-list-plus'></i></button><button class="delete-subtask-btn" data-subtask-index="${stIndex}" title="Excluir Subtarefa"><i class='bx bxs-trash'></i></button></div></li>`).join('')}</ul><form class="add-subtask-form"><input type="text" class="soft-input subtask-input" placeholder="Novo passo..."><button type="submit" class="soft-button add-subtask-btn"><i class='bx bx-plus'></i></button></form></div></div>`;
            goalsList.appendChild(li);
        });
    };
    const openGoalModal = (mode = 'add', index = null) => { goalForm.reset(); goalForm.dataset.mode = mode; goalForm.dataset.index = index; categoryContainer.innerHTML = Object.keys(ALL_CATEGORIES).map(cat => `<button type="button" class="category-btn">${cat}</button>`).join(''); if (mode === 'edit' && index !== null) { modalTitle.textContent = "Editar Meta"; const goal = goals[index]; document.getElementById('goal-title-input').value = goal.title; document.getElementById('goal-motivation-input').value = goal.motivation; document.getElementById('goal-date-input').value = goal.targetDate; categoryContainer.querySelectorAll('.category-btn').forEach(btn => { if (goal.categories.includes(btn.textContent)) btn.classList.add('active'); }); } else { modalTitle.textContent = "Criar Nova Meta"; } goalModal.classList.remove('hidden'); };
    const closeGoalModal = () => goalModal.classList.add('hidden');
    addGoalModalBtn.addEventListener('click', () => openGoalModal('add'));
    document.getElementById('cancel-goal-btn').addEventListener('click', closeGoalModal);
    goalModal.addEventListener('click', (e) => { if (e.target === goalModal) closeGoalModal(); });
    categoryContainer.addEventListener('click', (e) => { if (e.target.classList.contains('category-btn')) e.target.classList.toggle('active'); });
    goalForm.addEventListener('submit', (e) => { e.preventDefault(); const selectedCategories = [...categoryContainer.querySelectorAll('.category-btn.active')].map(btn => btn.textContent); if (document.getElementById('goal-title-input').value.trim() === '') { return alert("O título da meta é obrigatório."); } if (selectedCategories.length === 0) { return alert("Por favor, selecione ao menos uma categoria."); } const mode = goalForm.dataset.mode; const index = goalForm.dataset.index; const goalData = { title: document.getElementById('goal-title-input').value, motivation: document.getElementById('goal-motivation-input').value, categories: selectedCategories, targetDate: document.getElementById('goal-date-input').value, subtasks: (mode === 'edit' && goals[index]) ? goals[index].subtasks : [] }; if (mode === 'add') { goals.push(goalData); } else if (mode === 'edit') { goals[index] = goalData; } saveGoals(); renderGoals(); closeGoalModal(); });
    goalsList.addEventListener('click', (e) => { const goalItem = e.target.closest('.goal-item'); if (!goalItem) return; const goalIndex = parseInt(goalItem.dataset.index); let shouldReRender = false; if (e.target.closest('.goal-header') || e.target.closest('.goal-progress')) goalItem.classList.toggle('expanded'); if (e.target.closest('.edit-goal-btn')) openGoalModal('edit', goalIndex); if (e.target.closest('.delete-goal-btn')) { goals.splice(goalIndex, 1); shouldReRender = true; } if (e.target.closest('.subtask-item-label')) { const checkbox = e.target.closest('.subtask-item-label').querySelector('input'); if (checkbox) { checkbox.checked = !checkbox.checked; goals[goalIndex].subtasks[checkbox.dataset.subtaskIndex].completed = checkbox.checked; shouldReRender = true; } } if (e.target.closest('.delete-subtask-btn')) { goals[goalIndex].subtasks.splice(e.target.closest('.delete-subtask-btn').dataset.subtaskIndex, 1); shouldReRender = true; } if (e.target.closest('.add-to-focus-btn')) { const subtaskText = goals[goalIndex].subtasks[e.target.closest('.add-to-focus-btn').dataset.subtaskIndex].text; addTask(`[${goals[goalIndex].title}] ${subtaskText}`, 3); } if (shouldReRender) { const wasExpanded = goalItem.classList.contains('expanded'); saveGoals(); renderGoals(); if (wasExpanded) document.querySelector(`.goal-item[data-index="${goalIndex}"]`)?.classList.add('expanded'); } });
    goalsList.addEventListener('submit', (e) => { e.preventDefault(); if (e.target.classList.contains('add-subtask-form')) { const goalItem = e.target.closest('.goal-item'); const goalIndex = parseInt(goalItem.dataset.index); const subtaskInput = e.target.querySelector('.subtask-input'); const subtaskText = subtaskInput.value.trim(); if (subtaskText) { goals[goalIndex].subtasks.push({ text: subtaskText, completed: false }); saveGoals(); renderGoals(); document.querySelector(`.goal-item[data-index="${goalIndex}"]`)?.classList.add('expanded'); } } });
    
    // --- INICIALIZAÇÃO GERAL ---
    const initApp = () => {
        applyTheme(loadFromLocalStorage('theme', 'light'));
        renderTasks();
        updatePriorityBtn();
        setTimerForCurrentCycle();
        renderGoals();
        switchTab(loadFromLocalStorage('activeTab', 'inicio'));
    };
    initApp();
});